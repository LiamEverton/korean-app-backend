# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]


name: Deploy to Amazon ECS

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_DATABASE: koreanapp
          MYSQL_HOST: 127.0.0.1
          MYSQL_USER: koreanuser
          MYSQL_PASSWORD: Password123
        ports:
          - 1433:1433
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
  
    - name: Setup Java JDK
      uses: actions/setup-java@v2.3.0
      with:
        # The Java version to set up. Takes a whole or semver Java version. See examples of supported syntax in README file
        java-version: '8'
        # Java distribution. See the list of supported distributions in README file
        distribution: 'zulu'
        # The package type (jdk, jre, jdk+fx, jre+fx)
        java-package: 'jdk'
        # The architecture of the package
        architecture: 'x64'
        # Path to where the compressed JDK is located
        #jdkFile: # optional
        # Set this option if you want the action to check for the latest available version that satisfies the version spec
        #check-latest: # optional
        # ID of the distributionManagement repository in the pom.xml file. Default is `github`
        server-id: 'github'
        # Environment variable name for the username for authentication to the Apache Maven repository. Default is $GITHUB_ACTOR
        server-username: 'GITHUB_ACTOR'
        # Environment variable name for password or token for authentication to the Apache Maven repository. Default is $GITHUB_TOKEN
        server-password: 'GITHUB_TOKEN'
        # Path to where the settings.xml file will be written. Default is ~/.m2.
        #settings-path: # optional
        # Overwrite the settings.xml file if it exists. Default is "true".
        #overwrite-settings: # optional, default is true
        # GPG private key to import. Default is empty string.
        #gpg-private-key: # optional
        # Environment variable name for the GPG private key passphrase. Default is $GPG_PASSPHRASE.
        #gpg-passphrase: # optional
        # Name of the build platform to cache dependencies. It can be "maven" or "gradle".
        #cache: 'maven'
        # Workaround to pass job status to post job step. This variable is not intended for manual setting
        #job-status: # optional, default is ${{ job.status }}


    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: koreanrepo
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: sample-app
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: task-definition.json
        service: korean-app-service
        cluster: default
        wait-for-service-stability: true
